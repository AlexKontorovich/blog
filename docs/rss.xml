<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lean community blog</title><link>https://leanprover-community.github.io/blog/</link><description>This is the blog of the Lean prover community.</description><atom:link href="https://leanprover-community.github.io/blog/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents ¬© 2022 &lt;a href="mailto:"&gt;The Lean prover community&lt;/a&gt; </copyright><lastBuildDate>Mon, 05 Dec 2022 15:25:19 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>This month in mathlib (Oct and Nov 2022)</title><link>https://leanprover-community.github.io/blog/posts/this-month-in-mathlib-oct-and-nov-2022/</link><dc:creator>The Lean prover community</dc:creator><description>&lt;div&gt;&lt;p&gt;In October and November 2022 there were 512 and 453 PRs merged into mathlib. We list some of the highlights below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Measure theory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16830"&gt;PR #16830&lt;/a&gt; improves Vitali families and Lebesgue density theorem.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16762"&gt;PR #16762&lt;/a&gt; adds a version of Lebesgue's density theorem.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16906"&gt;PR #16906&lt;/a&gt; proves Lebesgue differentiation theorem.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16836"&gt;PR #16836&lt;/a&gt; relates integrals over &lt;code&gt;add_circle&lt;/code&gt; with integrals upstairs in &lt;code&gt;‚Ñù&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Algebra.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/14672"&gt;PR #14672&lt;/a&gt; defines mixed/equal characteristic zero.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/17018"&gt;PR #17018&lt;/a&gt;, &lt;a href="https://github.com/leanprover-community/mathlib/pull/16849"&gt;PR #16849&lt;/a&gt; and &lt;a href="https://github.com/leanprover-community/mathlib/pull/17011"&gt;PR #17011&lt;/a&gt; show the K√§hler differential module is functorial and that $S/R$ is formally unramified if and only if $\Omega^1_{S/R} = 0$. They also give the standard presentation of the K√§hler differential module.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16000"&gt;PR #16000&lt;/a&gt; proves Artin-Rees lemma and Krull's intersection theorems.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16317"&gt;PR #16317&lt;/a&gt; adds the multinomial theorem.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/17295"&gt;PR #17295&lt;/a&gt; proves the Jordan-H√∂lder theorem for modules.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/17311"&gt;PR #17311&lt;/a&gt; proves that a group with finitely many commutators has finite commutator subgroup.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/17243"&gt;PR #17243&lt;/a&gt; proves the Third Isomorphism theorem for rings.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/13749"&gt;PR #13749&lt;/a&gt; introduces non-unital subsemirings.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Analysis&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16723"&gt;PR #16723&lt;/a&gt; shows that two analytic functions that coincide locally coincide globally.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16683"&gt;PR #16683&lt;/a&gt; and &lt;a href="https://github.com/leanprover-community/mathlib/pull/16680"&gt;PR #16680&lt;/a&gt; introduce functions of bounded variation and prove that they are almost everywhere differentiable. As a corollary, &lt;a href="https://github.com/leanprover-community/mathlib/pull/16549"&gt;PR #16549&lt;/a&gt; shows that a monotone function is differentiable almost everywhere.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/17119"&gt;PR #17119&lt;/a&gt; defines and gives basic properties of the complex unit disc.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16780"&gt;PR #16780&lt;/a&gt; proves the open mapping theorem for holomorphic functions.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16487"&gt;PR #16487&lt;/a&gt; constructs the volume form.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16796"&gt;PR #16796&lt;/a&gt; generalizes the Hahn-Banach separation theorem to (locally convex) topological vector spaces.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16835"&gt;PR #16835&lt;/a&gt; proves functoriality of the character space.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16638"&gt;PR #16638&lt;/a&gt; introduces the Dirac delta distribution.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/17110"&gt;PR #17110&lt;/a&gt; proves smoothness of series of functions.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16201"&gt;PR #16201&lt;/a&gt; and &lt;a href="https://github.com/leanprover-community/mathlib/pull/17598"&gt;PR #17598&lt;/a&gt; define the additive circle and develop Fourier analysis on it.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/17543"&gt;PR #17543&lt;/a&gt; computes $\Gamma(1/2)$.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16053"&gt;PR #16053&lt;/a&gt; introduces the strong operator topology.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Number theory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/15405"&gt;PR #15405&lt;/a&gt; introduces the Selmer group of a Dedekind domain.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/17677"&gt;PR #17677&lt;/a&gt; defines slash-invariant forms, a step towards the definition of modular forms.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/17203"&gt;PR #17203&lt;/a&gt; defines the absolute ideal norm.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Representation theory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/17005"&gt;PR #17005&lt;/a&gt; is about exactness properties of resolutions.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16043"&gt;PR #16043&lt;/a&gt; proves the orthogonality of characters.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/13794"&gt;PR #13794&lt;/a&gt; proves Schur's lemma.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/17443"&gt;PR #17443&lt;/a&gt; adds the construction of a projective resolution of a representation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Topology.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16677"&gt;PR #16677&lt;/a&gt; constructs the Galois correspondence between closed ideals in $C(X, ùïú)$ and open sets in $X$.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16719"&gt;PR #16719&lt;/a&gt; shows that maximal ideals of $C(X, ùïú)$ correspond to (complements of) singletons.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16087"&gt;PR #16087&lt;/a&gt; defines covering spaces.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16797"&gt;PR #16797&lt;/a&gt; proves that the stalk functor preserves monomorphism.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/17015"&gt;PR #17015&lt;/a&gt; proves that Noetherian spaces have finite irreducible components.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Probability theory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16882"&gt;PR #16882&lt;/a&gt; proves the second Borel-Cantelli lemma.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16648"&gt;PR #16648&lt;/a&gt; shows Kolmogorov's 0-1 law.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Algebraic and differential geometry.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16124"&gt;PR #16124&lt;/a&gt;, &lt;a href="https://github.com/leanprover-community/mathlib/pull/17117"&gt;PR #17117&lt;/a&gt;, &lt;a href="https://github.com/leanprover-community/mathlib/pull/17080"&gt;PR #17080&lt;/a&gt; and &lt;a href="https://github.com/leanprover-community/mathlib/pull/17184"&gt;PR #17184&lt;/a&gt; develop various properties for morphisms of schemes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linear algebra.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/11468"&gt;PR #11468&lt;/a&gt; shows that the clifford algebra is isomorphic as a module to the exterior algebra.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16150"&gt;PR #16150&lt;/a&gt; proves that the inverse of a block triangular matrix is block triangular.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Category theory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16969"&gt;PR #16969&lt;/a&gt; adds basic results about localization of categories.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Combinatorics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16195"&gt;PR #16195&lt;/a&gt; adds the definition and some basic results about semistandard Young tableaux.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/17445"&gt;PR #17445&lt;/a&gt; adds an equivalence between Young diagrams and weakly decreasing lists of positive natural numbers.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/17306"&gt;PR #17306&lt;/a&gt; and &lt;a href="https://github.com/leanprover-community/mathlib/pull/17213"&gt;PR #17213&lt;/a&gt; define bridge edges, acyclic graphs, and trees for simple graphs, and provide some characterizations. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tactics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16313"&gt;PR #16313&lt;/a&gt; introduces the &lt;code&gt;qify&lt;/code&gt; tactic, to move from $\mathbb{Z}$ to $\mathbb{Q}$.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/13483"&gt;PR #13483&lt;/a&gt; adds a tactic for moving around summands.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/16911"&gt;PR #16911&lt;/a&gt; adds a tactic to find declarations that use &lt;code&gt;sorry&lt;/code&gt;. This tactic is intended for projects that depend on mathlib.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During these two months, we got two new versions of Lean. We also started to systematically port mathlib to Lean4, see the &lt;a href="https://github.com/leanprover-community/mathlib4/wiki"&gt;wiki&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><guid>https://leanprover-community.github.io/blog/posts/this-month-in-mathlib-oct-and-nov-2022/</guid><pubDate>Thu, 01 Dec 2022 13:56:21 GMT</pubDate></item><item><title>Definitions in the liquid tensor experiment</title><link>https://leanprover-community.github.io/blog/posts/lte-examples/</link><dc:creator>Adam Topaz</dc:creator><description>&lt;div&gt;&lt;p&gt;A few weeks ago, we announced the &lt;a href="https://leanprover-community.github.io/blog/posts/lte-final/"&gt;completion of the liquid tensor experiment&lt;/a&gt; (&lt;strong&gt;LTE&lt;/strong&gt; for short).
What this means is that we stated and (completely) proved the following result in Lean:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kd"&gt;variables&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p'&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;‚Ñù&lt;/span&gt;&lt;span class="bp"&gt;‚â•&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="bp"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;p'&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p'&lt;/span&gt; &lt;span class="bp"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="bp"&gt;‚â§&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;

&lt;span class="kd"&gt;theorem&lt;/span&gt; &lt;span class="n"&gt;liquid_tensor_experiment&lt;/span&gt; 
  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Profinite&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pBanach&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="bp"&gt;‚àÄ&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="bp"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Ext&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;‚Ñ≥_&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;p'&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="bp"&gt;‚âÖ&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt;
&lt;span class="c1"&gt;-- the proof ...&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The code block above, which is taken directly from the file &lt;a href="https://github.com/leanprover-community/lean-liquid/blob/92f188bd17f34dbfefc92a83069577f708851aec/src/challenge.lean"&gt;&lt;code&gt;challenge.lean&lt;/code&gt;&lt;/a&gt; in the main &lt;a href="https://github.com/leanprover-community/lean-liquid"&gt;LTE repository&lt;/a&gt;, uses some custom notation to make the statement appear as close as possible to the main theorem mentioned in 
&lt;a href="https://xenaproject.wordpress.com/2020/12/05/liquid-tensor-experiment/"&gt;Scholze's original challenge&lt;/a&gt;.
Fortunately, it's relatively straightforward to unravel the notation to see the underlying definitions themselves.
But there is a bigger issue: How can we convince ourselves (and others) that the &lt;em&gt;definitions&lt;/em&gt; we introduced in LTE are actually &lt;em&gt;correct&lt;/em&gt;? &lt;/p&gt;
&lt;p&gt;For instance, we could have &lt;em&gt;defined&lt;/em&gt; &lt;code&gt;Ext&lt;/code&gt; to be $0$ (spoiler: we didn't).
Or, we could have made some subtle innocent mistake in setting up the definitions that somehow &lt;em&gt;implies&lt;/em&gt; that &lt;code&gt;Ext&lt;/code&gt; is always $0$, or that all condensed abelian groups are trivial, or one of several other pitfalls that renders the statement above meaningless.&lt;/p&gt;
&lt;p&gt;To answer this question, we built a new &lt;a href="https://github.com/leanprover-community/lean-liquid/tree/92f188bd17f34dbfefc92a83069577f708851aec/src/examples"&gt;&lt;code&gt;examples&lt;/code&gt; folder&lt;/a&gt; in the repository which contains several files corresponding to the main players in the statement above.
These examples can be considered as centralized "sanity checks" that the definitions we wrote using Lean actually behave as expected.&lt;/p&gt;
&lt;p&gt;We tried to write the files in this folder in a way which should be (approximately) readable by mathematicians who have minimal experience with Lean.
The goal is to make it easy for non-experts to look through the examples folder, then look through the concise final statement in &lt;code&gt;challenge.lean&lt;/code&gt;, and be reasonably confident that the challenge was accomplished.&lt;/p&gt;
&lt;p&gt;This blog post gives a detailed overview of this folder and its contents, and how it relates to the definitions used in the main statement of the &lt;a href="https://github.com/leanprover-community/lean-liquid"&gt;liquid tensor experiment&lt;/a&gt;.
It is meant to be read &lt;em&gt;alongside&lt;/em&gt; the actual files from the &lt;a href="https://github.com/leanprover-community/lean-liquid/tree/92f188bd17f34dbfefc92a83069577f708851aec/src/examples"&gt;examples folder&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://leanprover-community.github.io/blog/posts/lte-examples/"&gt;Read more‚Ä¶&lt;/a&gt; (29 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://leanprover-community.github.io/blog/posts/lte-examples/</guid><pubDate>Fri, 14 Oct 2022 17:00:00 GMT</pubDate></item><item><title>This month in mathlib (Sep 2022)</title><link>https://leanprover-community.github.io/blog/posts/month-in-mathlib-sep-2022/</link><dc:creator>Mathlib community</dc:creator><description>&lt;div&gt;&lt;p&gt;In September 2022 there were 361 PRs merged into mathlib. We list some of the highlights below.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://leanprover-community.github.io/blog/posts/month-in-mathlib-sep-2022/"&gt;Read more‚Ä¶&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://leanprover-community.github.io/blog/posts/month-in-mathlib-sep-2022/</guid><pubDate>Sat, 08 Oct 2022 04:01:27 GMT</pubDate></item><item><title>This month in mathlib (Aug 2022)</title><link>https://leanprover-community.github.io/blog/posts/month-in-mathlib-aug-2022/</link><dc:creator>Mathlib community</dc:creator><description>&lt;div&gt;&lt;p&gt;In August 2022 there were 506 PRs merged into mathlib. We list some of the highlights below.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://leanprover-community.github.io/blog/posts/month-in-mathlib-aug-2022/"&gt;Read more‚Ä¶&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://leanprover-community.github.io/blog/posts/month-in-mathlib-aug-2022/</guid><pubDate>Thu, 01 Sep 2022 04:05:28 GMT</pubDate></item><item><title>This month in mathlib (Jul 2022)</title><link>https://leanprover-community.github.io/blog/posts/month-in-mathlib-jul-2022/</link><dc:creator>Mathlib community</dc:creator><description>&lt;div&gt;&lt;p&gt;In July 2022 there were 611 PRs merged into mathlib. We list some of the highlights below.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://leanprover-community.github.io/blog/posts/month-in-mathlib-jul-2022/"&gt;Read more‚Ä¶&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://leanprover-community.github.io/blog/posts/month-in-mathlib-jul-2022/</guid><pubDate>Thu, 11 Aug 2022 05:42:53 GMT</pubDate></item><item><title>This month in mathlib (Jun 2022)</title><link>https://leanprover-community.github.io/blog/posts/month-in-mathlib-jun-2022/</link><dc:creator>Mathlib community</dc:creator><description>&lt;div&gt;&lt;p&gt;We apologize for the delay in posting this overview.
In June 2022 there were 460 PRs merged into mathlib. We list some of the highlights below.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://leanprover-community.github.io/blog/posts/month-in-mathlib-jun-2022/"&gt;Read more‚Ä¶&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://leanprover-community.github.io/blog/posts/month-in-mathlib-jun-2022/</guid><pubDate>Thu, 11 Aug 2022 05:42:45 GMT</pubDate></item><item><title>Classification of one-dimensional isocrystals</title><link>https://leanprover-community.github.io/blog/posts/classification-of-one-dimensional-isocrystals/</link><dc:creator>Robert Y. Lewis, Heather Macbeth</dc:creator><description>&lt;div&gt;&lt;p&gt;Last year, there was a &lt;a href="https://leanprover-community.github.io/blog/posts/semilinear-maps"&gt;big mathlib refactor&lt;/a&gt; to replace linear maps throughout the library with  &lt;em&gt;semilinear maps&lt;/em&gt;,
a more abstract concept which, importantly, unifies linear and conjugate-linear maps.&lt;/p&gt;
&lt;p&gt;But this is not the full extent of the generalization!  Our number theorist friends here in mathlib told us that we should
make sure we chose this full generality of &lt;em&gt;semilinear&lt;/em&gt; maps, maps $f:M \to N$ such that $f(ax)=\sigma(a)f(x)$ for some ring homomorphism $\sigma$ between the scalar rings of the modules $M$ and $N$.  So we and our coauthor Fr√©d√©ric Dupuis implemented this full generality, and then asked them for an example to illustrate their need for this more abstract definition. This blog post tells the story of our little adventure in number theory.&lt;/p&gt;
&lt;p&gt;It turns out that the standard use of semilinear maps in number theory is for &lt;em&gt;Frobenius-semilinearity&lt;/em&gt;, semilinearity with
respect to the ring homomorphism of the fraction field of the $p$-typical Witt vectors over a perfect characteristic-$p$ integral domain which is induced by the Frobenius
automorphism of that domain.  Let's backtrack to catch everyone up...&lt;/p&gt;
&lt;p&gt;&lt;a href="https://leanprover-community.github.io/blog/posts/classification-of-one-dimensional-isocrystals/"&gt;Read more‚Ä¶&lt;/a&gt; (13 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://leanprover-community.github.io/blog/posts/classification-of-one-dimensional-isocrystals/</guid><pubDate>Sat, 06 Aug 2022 04:30:08 GMT</pubDate></item><item><title>Introducing Mathlib Changelog</title><link>https://leanprover-community.github.io/blog/posts/mathlib-changelog/</link><dc:creator>David Chanin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="mathlib-changelog sample page" src="https://leanprover-community.github.io/blog/images/changelog_lemma.png"&gt;&lt;/p&gt;
&lt;p&gt;Tldr; check out &lt;a href="https://mathlib-changelog.org"&gt;mathlib-changelog.org&lt;/a&gt; to explore the historical changes to mathlib, and find out what happened to that lemma you were using.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://leanprover-community.github.io/blog/posts/mathlib-changelog/"&gt;Read more‚Ä¶&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://leanprover-community.github.io/blog/posts/mathlib-changelog/</guid><pubDate>Thu, 28 Jul 2022 07:35:23 GMT</pubDate></item><item><title>Completion of the Liquid Tensor Experiment</title><link>https://leanprover-community.github.io/blog/posts/lte-final/</link><dc:creator>Mathlib community</dc:creator><description>&lt;div&gt;&lt;p&gt;We are proud to announce that as of 15:46:13 (EST) on Thursday, July 14 2022 the Liquid Tensor Experiment has been
&lt;a href="https://github.com/leanprover-community/lean-liquid/commits/completed"&gt;completed&lt;/a&gt;.
A year and a half after the
&lt;a href="https://xenaproject.wordpress.com/2020/12/05/liquid-tensor-experiment/"&gt;challenge&lt;/a&gt;
was posed by Peter Scholze we have finally formally verified the main theorem of liquid vector spaces using the Lean proof assistant.
The blueprint for the project can be found &lt;a href="https://leanprover-community.github.io/liquid/"&gt;here&lt;/a&gt; and the formalization itself is available on &lt;a href="https://github.com/leanprover-community/lean-liquid"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first major milestone was
&lt;a href="https://xenaproject.wordpress.com/2021/06/05/half-a-year-of-the-liquid-tensor-experiment-amazing-developments/"&gt;announced&lt;/a&gt;
in June last year. The achievement was described in
&lt;a href="https://www.nature.com/articles/d41586-021-01627-2"&gt;Nature&lt;/a&gt;
and
&lt;a href="https://www.quantamagazine.org/lean-computer-program-confirms-peter-scholze-proof-20210728/"&gt;Quanta&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more information about Lean and formalization of mathematics, see the
&lt;a href="https://leanprover-community.github.io/"&gt;Lean community website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://leanprover-community.github.io/blog/posts/lte-final/"&gt;Read more‚Ä¶&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://leanprover-community.github.io/blog/posts/lte-final/</guid><pubDate>Fri, 15 Jul 2022 13:00:00 GMT</pubDate></item><item><title>The ring of integers of a cyclotomic field</title><link>https://leanprover-community.github.io/blog/posts/the-ring-of-integers-of-a-cyclotomic-field/</link><dc:creator>Riccardo Brasca</dc:creator><description>&lt;div&gt;&lt;p&gt;In &lt;a href="https://github.com/leanprover-community/mathlib/pull/13585"&gt;PR #13585&lt;/a&gt; we compute the
discriminant of cyclotomic fields. This is an important result, usually treated in a first year
graduate course in number theory. In this post we would like to explain why it is an important
result, and briefly explain how we proved it.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://leanprover-community.github.io/blog/posts/the-ring-of-integers-of-a-cyclotomic-field/"&gt;Read more‚Ä¶&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://leanprover-community.github.io/blog/posts/the-ring-of-integers-of-a-cyclotomic-field/</guid><pubDate>Fri, 17 Jun 2022 20:24:12 GMT</pubDate></item></channel></rss>